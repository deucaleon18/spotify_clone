{"ast":null,"code":"/*! last-fm. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nconst get = require('simple-get');\n\nconst querystring = require('querystring');\n\nconst parallel = require('run-parallel');\n\nconst IMAGE_WEIGHT = {\n  '': 1,\n  // missing size is ranked last\n  small: 2,\n  medium: 3,\n  large: 4,\n  extralarge: 5,\n  mega: 6\n};\n\nclass LastFM {\n  constructor(key, opts) {\n    if (!key) throw new Error('Missing required `key` argument');\n    if (!opts) opts = {};\n    this._key = key;\n    this._userAgent = opts.userAgent || 'last-fm (https://github.com/feross/last-fm)';\n    this._minArtistListeners = opts.minArtistListeners || 0;\n    this._minTrackListeners = opts.minTrackListeners || 0;\n  }\n\n  _sendRequest(params, name, cb) {\n    Object.assign(params, {\n      api_key: this._key,\n      format: 'json'\n    });\n    const urlBase = 'https://ws.audioscrobbler.com/2.0/';\n    const opts = {\n      url: urlBase + '?' + querystring.stringify(params),\n      headers: {\n        'User-Agent': this._userAgent\n      },\n      timeout: 30 * 1000,\n      json: true\n    };\n    get.concat(opts, onResponse);\n\n    function onResponse(err, res, data) {\n      if (err) return cb(err);\n      if (data.error) return cb(new Error(data.message));\n      cb(null, data[name]);\n    }\n  }\n  /**\n   * PARSE COMMON RESPONSE PROPERTIES\n   */\n\n\n  _parseImages(image) {\n    return image.sort((a, b) => IMAGE_WEIGHT[a.size] - IMAGE_WEIGHT[b.size]).filter(image => image.size !== '').map(image => image['#text']).filter(image => image && image.length > 0);\n  }\n\n  _parseMeta(data, query) {\n    if (data['opensearch:totalResults']) {\n      const total = Number(data['opensearch:totalResults']);\n      const perPage = Number(data['opensearch:itemsPerPage']);\n      const page = Number(data['opensearch:startIndex']) / perPage + 1;\n      const totalPages = Math.ceil(total / perPage);\n      return {\n        query,\n        page,\n        perPage,\n        total,\n        totalPages\n      };\n    } else {\n      return {\n        query,\n        page: Number(data['@attr'].page),\n        perPage: Number(data['@attr'].perPage),\n        total: Number(data['@attr'].total),\n        totalPages: Number(data['@attr'].totalPages)\n      };\n    }\n  }\n\n  _parseSummary(summary) {\n    return summary.replace(/\\s+?<a .*?>Read more on Last\\.fm<\\/a>.*$/, '');\n  }\n  /**\n   * PARSE COMMON RESPONSE TYPES\n   */\n\n\n  _parseArtists(artists) {\n    return artists.map(artist => {\n      return {\n        type: 'artist',\n        name: artist.name,\n        listeners: Number(artist.listeners),\n        images: this._parseImages(artist.image)\n      };\n    }).filter(artist => artist.listeners == null || artist.listeners >= this._minArtistListeners);\n  }\n\n  _parseAlbums(albums) {\n    return albums.map(album => {\n      return {\n        type: 'album',\n        name: album.name,\n        artistName: album.artist.name || album.artist,\n        listeners: album.playcount && Number(album.playcount) || album.listeners && Number(album.listeners),\n        // optional\n        images: this._parseImages(album.image)\n      };\n    });\n  }\n\n  _parseTags(tags) {\n    return tags.tag.map(t => t.name);\n  }\n\n  _parseTracks(tracks) {\n    return tracks.map(track => {\n      const listeners = track.playcount || track.listeners;\n      return {\n        type: 'track',\n        name: track.name,\n        artistName: track.artist.name || track.artist,\n        duration: track.duration && Number(track.duration),\n        // optional\n        listeners: listeners && Number(listeners),\n        // optional\n        images: track.image && this._parseImages(track.image) // optional\n\n      };\n    }).filter(track => track.listeners == null || track.listeners >= this._minTrackListeners);\n  }\n  /**\n   * CONVENIENCE API\n   */\n\n\n  search(opts, cb) {\n    if (!opts.q) {\n      return cb(new Error('Missing required param: q'));\n    }\n\n    parallel({\n      artists: cb => {\n        this.artistSearch({\n          q: opts.q,\n          limit: opts.artistsLimit || opts.limit\n        }, cb);\n      },\n      tracks: cb => {\n        this.trackSearch({\n          q: opts.q,\n          limit: opts.tracksLimit || opts.limit\n        }, cb);\n      },\n      albums: cb => {\n        this.albumSearch({\n          q: opts.q,\n          limit: opts.albumsLimit || opts.limit\n        }, cb);\n      }\n    }, (err, r) => {\n      if (err) return cb(err);\n      const page = r.artists.meta.page;\n      const total = r.artists.meta.total + r.tracks.meta.total + r.albums.meta.total;\n      const perPage = r.artists.meta.perPage * 3;\n      const totalPages = Math.ceil(total / perPage);\n      const result = {\n        meta: {\n          query: opts,\n          page,\n          perPage,\n          total,\n          totalPages\n        },\n        result: {\n          type: 'search',\n          q: opts.q,\n          artists: r.artists.result,\n          tracks: r.tracks.result,\n          albums: r.albums.result\n        }\n      }; // Prefer an exact match\n\n      const exactMatch = [].concat(result.result.artists, result.result.tracks, result.result.albums).filter(result => result.name.toLowerCase() === opts.q).sort((a, b) => (b.listeners || 0) - (a.listeners || 0))[0]; // Otherwise, use most popular result by listener count. Albums don't have listener count.\n\n      const top = [].concat(result.result.artists, result.result.tracks).sort((a, b) => b.listeners - a.listeners)[0];\n      result.result.top = exactMatch || top || null;\n      cb(null, result);\n    });\n  }\n  /**\n   * ALBUM API\n   */\n\n\n  albumInfo(opts, cb) {\n    if (!opts.name || !opts.artistName) {\n      return cb(new Error('Missing required params: name, artistName'));\n    }\n\n    const params = {\n      method: 'album.getInfo',\n      album: opts.name,\n      artist: opts.artistName,\n      autocorrect: 1\n    };\n\n    this._sendRequest(params, 'album', (err, album) => {\n      if (err) return cb(err);\n      cb(null, {\n        type: 'album',\n        name: album.name,\n        artistName: album.artist,\n        images: this._parseImages(album.image),\n        listeners: Number(album.playcount) || Number(album.listeners),\n        tracks: this._parseTracks(album.tracks.track),\n        tags: this._parseTags(album.tags),\n        summary: album.wiki && this._parseSummary(album.wiki.content)\n      });\n    });\n  }\n\n  albumTopTags(opts, cb) {\n    if (!opts.name || !opts.artistName) {\n      return cb(new Error('Missing required params: name, artistName'));\n    }\n\n    const params = {\n      method: 'album.getTopTags',\n      album: opts.name,\n      artist: opts.artistName,\n      autocorrect: 1\n    };\n\n    this._sendRequest(params, 'toptags', cb);\n  }\n\n  albumSearch(opts, cb) {\n    if (!opts.q) {\n      return cb(new Error('Missing required param: q'));\n    }\n\n    const params = {\n      method: 'album.search',\n      limit: opts.limit,\n      page: opts.page,\n      album: opts.q\n    };\n\n    this._sendRequest(params, 'results', (err, data) => {\n      if (err) return cb(err);\n      cb(null, {\n        meta: this._parseMeta(data, opts),\n        result: this._parseAlbums(data.albummatches.album)\n      });\n    });\n  }\n  /**\n   * ARTIST API\n   */\n\n\n  artistCorrection(opts, cb) {\n    if (!opts.name) {\n      return cb(new Error('Missing required param: name'));\n    }\n\n    const params = {\n      method: 'artist.getCorrection',\n      artist: opts.name\n    };\n\n    this._sendRequest(params, 'corrections', (err, data) => {\n      if (err) return cb(err);\n      const correction = data.correction;\n      cb(null, {\n        name: correction.artist.name\n      });\n    });\n  }\n\n  artistInfo(opts, cb) {\n    if (!opts.name) {\n      return cb(new Error('Missing required param: name'));\n    }\n\n    const params = {\n      method: 'artist.getInfo',\n      artist: opts.name,\n      autocorrect: 1\n    };\n\n    this._sendRequest(params, 'artist', (err, artist) => {\n      if (err) return cb(err);\n      const similar = artist.similar.artist.map(similarArtist => {\n        return {\n          type: 'artist',\n          name: similarArtist.name,\n          images: this._parseImages(similarArtist.image)\n        };\n      });\n      cb(null, {\n        type: 'artist',\n        name: artist.name,\n        listeners: Number(artist.stats.listeners),\n        images: this._parseImages(artist.image),\n        tags: this._parseTags(artist.tags),\n        summary: this._parseSummary(artist.bio.content),\n        similar\n      });\n    });\n  }\n\n  artistSimilar(opts, cb) {\n    if (!opts.name) {\n      return cb(new Error('Missing required param: name'));\n    }\n\n    const params = {\n      method: 'artist.getSimilar',\n      artist: opts.name,\n      limit: opts.limit,\n      autocorrect: 1\n    };\n\n    this._sendRequest(params, 'similarartists', cb);\n  }\n\n  artistTopAlbums(opts, cb) {\n    if (!opts.name) {\n      return cb(new Error('Missing required param: name'));\n    }\n\n    const params = {\n      method: 'artist.getTopAlbums',\n      artist: opts.name,\n      limit: opts.limit,\n      autocorrect: 1\n    };\n\n    this._sendRequest(params, 'topalbums', (err, data) => {\n      if (err) return cb(err);\n      cb(null, {\n        meta: this._parseMeta(data, opts),\n        result: this._parseAlbums(data.album)\n      });\n    });\n  }\n\n  artistTopTags(opts, cb) {\n    if (!opts.name) {\n      return cb(new Error('Missing required param: name'));\n    }\n\n    const params = {\n      method: 'artist.getTopTags',\n      artist: opts.name,\n      autocorrect: 1\n    };\n\n    this._sendRequest(params, 'toptags', cb);\n  }\n\n  artistTopTracks(opts, cb) {\n    if (!opts.name) {\n      return cb(new Error('Missing required param: name'));\n    }\n\n    const params = {\n      method: 'artist.getTopTracks',\n      artist: opts.name,\n      limit: opts.limit,\n      autocorrect: 1\n    };\n\n    this._sendRequest(params, 'toptracks', (err, data) => {\n      if (err) return cb(err);\n      cb(null, {\n        meta: this._parseMeta(data, opts),\n        result: this._parseTracks(data.track)\n      });\n    });\n  }\n\n  artistSearch(opts, cb) {\n    if (!opts.q) {\n      return cb(new Error('Missing required param: q'));\n    }\n\n    const params = {\n      method: 'artist.search',\n      limit: opts.limit,\n      page: opts.page,\n      artist: opts.q\n    };\n\n    this._sendRequest(params, 'results', (err, data) => {\n      if (err) return cb(err);\n      cb(null, {\n        meta: this._parseMeta(data, opts),\n        result: this._parseArtists(data.artistmatches.artist)\n      });\n    });\n  }\n  /**\n   * CHART API\n   */\n\n\n  chartTopArtists(opts, cb) {\n    const params = {\n      method: 'chart.getTopArtists',\n      limit: opts.limit,\n      page: opts.page,\n      autocorrect: 1\n    };\n\n    this._sendRequest(params, 'artists', (err, data) => {\n      if (err) return cb(err);\n      cb(null, {\n        meta: this._parseMeta(data, opts),\n        result: this._parseArtists(data.artist)\n      });\n    });\n  }\n\n  chartTopTags(opts, cb) {\n    const params = {\n      method: 'chart.getTopTags',\n      limit: opts.limit,\n      page: opts.page,\n      autocorrect: 1\n    };\n\n    this._sendRequest(params, 'tags', cb);\n  }\n\n  chartTopTracks(opts, cb) {\n    const params = {\n      method: 'chart.getTopTracks',\n      limit: opts.limit,\n      page: opts.page,\n      autocorrect: 1\n    };\n\n    this._sendRequest(params, 'tracks', (err, data) => {\n      if (err) return cb(err);\n      cb(null, {\n        meta: this._parseMeta(data, opts),\n        result: this._parseTracks(data.track)\n      });\n    });\n  }\n  /**\n   * GEO API\n   */\n\n\n  geoTopArtists(opts, cb) {\n    if (!opts.country) {\n      return cb(new Error('Missing required param: country'));\n    }\n\n    const params = {\n      method: 'geo.getTopArtists',\n      country: opts.country,\n      limit: opts.limit,\n      page: opts.page,\n      autocorrect: 1\n    };\n\n    this._sendRequest(params, 'topartists', cb);\n  }\n\n  geoTopTracks(opts, cb) {\n    if (!opts.country) {\n      return cb(new Error('Missing required param: country'));\n    }\n\n    const params = {\n      method: 'geo.getTopTracks',\n      country: opts.country,\n      limit: opts.limit,\n      page: opts.page,\n      autocorrect: 1\n    };\n\n    this._sendRequest(params, 'tracks', cb);\n  }\n  /**\n   * TAG API\n   */\n\n\n  tagInfo(opts, cb) {\n    if (!opts.tag) {\n      return cb(new Error('Missing required param: tag'));\n    }\n\n    const params = {\n      method: 'tag.getInfo',\n      tag: opts.tag\n    };\n\n    this._sendRequest(params, 'tag', cb);\n  }\n\n  tagSimilar(opts, cb) {\n    if (!opts.tag) {\n      return cb(new Error('Missing required param: tag'));\n    }\n\n    const params = {\n      method: 'tag.getSimilar',\n      tag: opts.tag\n    };\n\n    this._sendRequest(params, 'similartags', cb);\n  }\n\n  tagTopAlbums(opts, cb) {\n    if (!opts.tag) {\n      return cb(new Error('Missing required param: tag'));\n    }\n\n    const params = {\n      method: 'tag.getTopAlbums',\n      limit: opts.limit,\n      page: opts.page,\n      tag: opts.tag\n    };\n\n    this._sendRequest(params, 'albums', cb);\n  }\n\n  tagTopArtists(opts, cb) {\n    if (!opts.tag) {\n      return cb(new Error('Missing required param: tag'));\n    }\n\n    const params = {\n      method: 'tag.getTopArtists',\n      limit: opts.limit,\n      page: opts.page,\n      tag: opts.tag\n    };\n\n    this._sendRequest(params, 'topartists', cb);\n  }\n\n  tagTopTags(opts, cb) {\n    const params = {\n      method: 'tag.getTopTags'\n    };\n\n    this._sendRequest(params, 'toptags', cb);\n  }\n\n  tagTopTracks(opts, cb) {\n    if (!opts.tag) {\n      return cb(new Error('Missing required param: tag'));\n    }\n\n    const params = {\n      method: 'tag.getTopTracks',\n      limit: opts.limit,\n      page: opts.page,\n      tag: opts.tag\n    };\n\n    this._sendRequest(params, 'tracks', cb);\n  }\n  /**\n   * TRACK API\n   */\n\n\n  trackCorrection(opts, cb) {\n    if (!opts.name || !opts.artistName) {\n      return cb(new Error('Missing required params: name, artistName'));\n    }\n\n    const params = {\n      method: 'track.getCorrection',\n      track: opts.name,\n      artist: opts.artistName\n    };\n\n    this._sendRequest(params, 'corrections', (err, data) => {\n      if (err) return cb(err);\n      cb(null, {\n        name: data.correction.track.name,\n        artistName: data.correction.track.artist.name\n      });\n    });\n  }\n\n  trackInfo(opts, cb) {\n    if (!opts.name || !opts.artistName) {\n      return cb(new Error('Missing required params: name, artistName'));\n    }\n\n    const params = {\n      method: 'track.getInfo',\n      track: opts.name,\n      artist: opts.artistName,\n      autocorrect: 1\n    };\n\n    this._sendRequest(params, 'track', (err, track) => {\n      if (err) return cb(err);\n      cb(null, {\n        type: 'track',\n        name: track.name,\n        artistName: track.artist.name,\n        albumName: track.album && track.album.title,\n        listeners: Number(track.listeners),\n        duration: Math.ceil(track.duration / 1000),\n        images: track.album && this._parseImages(track.album.image),\n        tags: this._parseTags(track.toptags)\n      });\n    });\n  }\n\n  trackSimilar(opts, cb) {\n    if (!opts.name || !opts.artistName) {\n      return cb(new Error('Missing required params: name, artistName'));\n    }\n\n    const params = {\n      method: 'track.getSimilar',\n      track: opts.name,\n      artist: opts.artistName,\n      limit: opts.limit,\n      autocorrect: 1\n    };\n\n    this._sendRequest(params, 'similartracks', cb);\n  }\n\n  trackTopTags(opts, cb) {\n    if (!opts.name || !opts.artistName) {\n      return cb(new Error('Missing required params: name, artistName'));\n    }\n\n    const params = {\n      method: 'track.getTopTags',\n      track: opts.name,\n      artist: opts.artistName,\n      autocorrect: 1\n    };\n\n    this._sendRequest(params, 'toptags', cb);\n  }\n\n  trackSearch(opts, cb) {\n    if (!opts.q) {\n      return cb(new Error('Missing required param: q'));\n    }\n\n    const params = {\n      method: 'track.search',\n      limit: opts.limit,\n      page: opts.page,\n      track: opts.q,\n      artist: opts.artist // narrow search by artist (optional)\n\n    };\n\n    this._sendRequest(params, 'results', (err, data) => {\n      if (err) return cb(err);\n      cb(null, {\n        meta: this._parseMeta(data, opts),\n        result: this._parseTracks(data.trackmatches.track)\n      });\n    });\n  }\n\n}\n\nmodule.exports = LastFM;","map":{"version":3,"sources":["/home/deucaleon18/Desktop/deezer/node_modules/last-fm/index.js"],"names":["get","require","querystring","parallel","IMAGE_WEIGHT","small","medium","large","extralarge","mega","LastFM","constructor","key","opts","Error","_key","_userAgent","userAgent","_minArtistListeners","minArtistListeners","_minTrackListeners","minTrackListeners","_sendRequest","params","name","cb","Object","assign","api_key","format","urlBase","url","stringify","headers","timeout","json","concat","onResponse","err","res","data","error","message","_parseImages","image","sort","a","b","size","filter","map","length","_parseMeta","query","total","Number","perPage","page","totalPages","Math","ceil","_parseSummary","summary","replace","_parseArtists","artists","artist","type","listeners","images","_parseAlbums","albums","album","artistName","playcount","_parseTags","tags","tag","t","_parseTracks","tracks","track","duration","search","q","artistSearch","limit","artistsLimit","trackSearch","tracksLimit","albumSearch","albumsLimit","r","meta","result","exactMatch","toLowerCase","top","albumInfo","method","autocorrect","wiki","content","albumTopTags","albummatches","artistCorrection","correction","artistInfo","similar","similarArtist","stats","bio","artistSimilar","artistTopAlbums","artistTopTags","artistTopTracks","artistmatches","chartTopArtists","chartTopTags","chartTopTracks","geoTopArtists","country","geoTopTracks","tagInfo","tagSimilar","tagTopAlbums","tagTopArtists","tagTopTags","tagTopTracks","trackCorrection","trackInfo","albumName","title","toptags","trackSimilar","trackTopTags","trackmatches","module","exports"],"mappings":"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","sourcesContent":["/*! last-fm. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nconst get = require('simple-get')\nconst querystring = require('querystring')\nconst parallel = require('run-parallel')\n\nconst IMAGE_WEIGHT = {\n  '': 1, // missing size is ranked last\n  small: 2,\n  medium: 3,\n  large: 4,\n  extralarge: 5,\n  mega: 6\n}\n\nclass LastFM {\n  constructor (key, opts) {\n    if (!key) throw new Error('Missing required `key` argument')\n    if (!opts) opts = {}\n    this._key = key\n    this._userAgent = opts.userAgent || 'last-fm (https://github.com/feross/last-fm)'\n    this._minArtistListeners = opts.minArtistListeners || 0\n    this._minTrackListeners = opts.minTrackListeners || 0\n  }\n\n  _sendRequest (params, name, cb) {\n    Object.assign(params, {\n      api_key: this._key,\n      format: 'json'\n    })\n\n    const urlBase = 'https://ws.audioscrobbler.com/2.0/'\n\n    const opts = {\n      url: urlBase + '?' + querystring.stringify(params),\n      headers: {\n        'User-Agent': this._userAgent\n      },\n      timeout: 30 * 1000,\n      json: true\n    }\n\n    get.concat(opts, onResponse)\n\n    function onResponse (err, res, data) {\n      if (err) return cb(err)\n      if (data.error) return cb(new Error(data.message))\n      cb(null, data[name])\n    }\n  }\n\n  /**\n   * PARSE COMMON RESPONSE PROPERTIES\n   */\n\n  _parseImages (image) {\n    return image\n      .sort((a, b) => IMAGE_WEIGHT[a.size] - IMAGE_WEIGHT[b.size])\n      .filter(image => image.size !== '')\n      .map(image => image['#text'])\n      .filter(image => image && image.length > 0)\n  }\n\n  _parseMeta (data, query) {\n    if (data['opensearch:totalResults']) {\n      const total = Number(data['opensearch:totalResults'])\n      const perPage = Number(data['opensearch:itemsPerPage'])\n      const page = (Number(data['opensearch:startIndex']) / perPage) + 1\n      const totalPages = Math.ceil(total / perPage)\n      return { query, page, perPage, total, totalPages }\n    } else {\n      return {\n        query,\n        page: Number(data['@attr'].page),\n        perPage: Number(data['@attr'].perPage),\n        total: Number(data['@attr'].total),\n        totalPages: Number(data['@attr'].totalPages)\n      }\n    }\n  }\n\n  _parseSummary (summary) {\n    return summary.replace(/\\s+?<a .*?>Read more on Last\\.fm<\\/a>.*$/, '')\n  }\n\n  /**\n   * PARSE COMMON RESPONSE TYPES\n   */\n\n  _parseArtists (artists) {\n    return artists\n      .map(artist => {\n        return {\n          type: 'artist',\n          name: artist.name,\n          listeners: Number(artist.listeners),\n          images: this._parseImages(artist.image)\n        }\n      })\n      .filter(artist => artist.listeners == null || artist.listeners >= this._minArtistListeners)\n  }\n\n  _parseAlbums (albums) {\n    return albums\n      .map(album => {\n        return {\n          type: 'album',\n          name: album.name,\n          artistName: album.artist.name || album.artist,\n          listeners: (\n            (album.playcount && Number(album.playcount)) ||\n            (album.listeners && Number(album.listeners))\n          ), // optional\n          images: this._parseImages(album.image)\n        }\n      })\n  }\n\n  _parseTags (tags) {\n    return tags.tag.map(t => t.name)\n  }\n\n  _parseTracks (tracks) {\n    return tracks\n      .map(track => {\n        const listeners = track.playcount || track.listeners\n        return {\n          type: 'track',\n          name: track.name,\n          artistName: track.artist.name || track.artist,\n          duration: track.duration && Number(track.duration), // optional\n          listeners: listeners && Number(listeners), // optional\n          images: track.image && this._parseImages(track.image) // optional\n        }\n      })\n      .filter(track => track.listeners == null || track.listeners >= this._minTrackListeners)\n  }\n\n  /**\n   * CONVENIENCE API\n   */\n\n  search (opts, cb) {\n    if (!opts.q) {\n      return cb(new Error('Missing required param: q'))\n    }\n    parallel({\n      artists: cb => {\n        this.artistSearch({ q: opts.q, limit: opts.artistsLimit || opts.limit }, cb)\n      },\n      tracks: cb => {\n        this.trackSearch({ q: opts.q, limit: opts.tracksLimit || opts.limit }, cb)\n      },\n      albums: cb => {\n        this.albumSearch({ q: opts.q, limit: opts.albumsLimit || opts.limit }, cb)\n      }\n    }, (err, r) => {\n      if (err) return cb(err)\n\n      const page = r.artists.meta.page\n      const total = r.artists.meta.total + r.tracks.meta.total + r.albums.meta.total\n      const perPage = r.artists.meta.perPage * 3\n      const totalPages = Math.ceil(total / perPage)\n\n      const result = {\n        meta: { query: opts, page, perPage, total, totalPages },\n        result: {\n          type: 'search',\n          q: opts.q,\n          artists: r.artists.result,\n          tracks: r.tracks.result,\n          albums: r.albums.result\n        }\n      }\n\n      // Prefer an exact match\n      const exactMatch = []\n        .concat(result.result.artists, result.result.tracks, result.result.albums)\n        .filter(result => result.name.toLowerCase() === opts.q)\n        .sort((a, b) => (b.listeners || 0) - (a.listeners || 0))[0]\n\n      // Otherwise, use most popular result by listener count. Albums don't have listener count.\n      const top = []\n        .concat(result.result.artists, result.result.tracks)\n        .sort((a, b) => b.listeners - a.listeners)[0]\n\n      result.result.top = exactMatch || top || null\n\n      cb(null, result)\n    })\n  }\n\n  /**\n   * ALBUM API\n   */\n\n  albumInfo (opts, cb) {\n    if (!opts.name || !opts.artistName) {\n      return cb(new Error('Missing required params: name, artistName'))\n    }\n    const params = {\n      method: 'album.getInfo',\n      album: opts.name,\n      artist: opts.artistName,\n      autocorrect: 1\n    }\n    this._sendRequest(params, 'album', (err, album) => {\n      if (err) return cb(err)\n      cb(null, {\n        type: 'album',\n        name: album.name,\n        artistName: album.artist,\n        images: this._parseImages(album.image),\n        listeners: Number(album.playcount) || Number(album.listeners),\n        tracks: this._parseTracks(album.tracks.track),\n        tags: this._parseTags(album.tags),\n        summary: album.wiki && this._parseSummary(album.wiki.content)\n      })\n    })\n  }\n\n  albumTopTags (opts, cb) {\n    if (!opts.name || !opts.artistName) {\n      return cb(new Error('Missing required params: name, artistName'))\n    }\n    const params = {\n      method: 'album.getTopTags',\n      album: opts.name,\n      artist: opts.artistName,\n      autocorrect: 1\n    }\n    this._sendRequest(params, 'toptags', cb)\n  }\n\n  albumSearch (opts, cb) {\n    if (!opts.q) {\n      return cb(new Error('Missing required param: q'))\n    }\n    const params = {\n      method: 'album.search',\n      limit: opts.limit,\n      page: opts.page,\n      album: opts.q\n    }\n    this._sendRequest(params, 'results', (err, data) => {\n      if (err) return cb(err)\n      cb(null, {\n        meta: this._parseMeta(data, opts),\n        result: this._parseAlbums(data.albummatches.album)\n      })\n    })\n  }\n\n  /**\n   * ARTIST API\n   */\n\n  artistCorrection (opts, cb) {\n    if (!opts.name) {\n      return cb(new Error('Missing required param: name'))\n    }\n    const params = {\n      method: 'artist.getCorrection',\n      artist: opts.name\n    }\n    this._sendRequest(params, 'corrections', (err, data) => {\n      if (err) return cb(err)\n      const correction = data.correction\n      cb(null, {\n        name: correction.artist.name\n      })\n    })\n  }\n\n  artistInfo (opts, cb) {\n    if (!opts.name) {\n      return cb(new Error('Missing required param: name'))\n    }\n    const params = {\n      method: 'artist.getInfo',\n      artist: opts.name,\n      autocorrect: 1\n    }\n    this._sendRequest(params, 'artist', (err, artist) => {\n      if (err) return cb(err)\n      const similar = artist.similar.artist.map(similarArtist => {\n        return {\n          type: 'artist',\n          name: similarArtist.name,\n          images: this._parseImages(similarArtist.image)\n        }\n      })\n      cb(null, {\n        type: 'artist',\n        name: artist.name,\n        listeners: Number(artist.stats.listeners),\n        images: this._parseImages(artist.image),\n        tags: this._parseTags(artist.tags),\n        summary: this._parseSummary(artist.bio.content),\n        similar\n      })\n    })\n  }\n\n  artistSimilar (opts, cb) {\n    if (!opts.name) {\n      return cb(new Error('Missing required param: name'))\n    }\n    const params = {\n      method: 'artist.getSimilar',\n      artist: opts.name,\n      limit: opts.limit,\n      autocorrect: 1\n    }\n    this._sendRequest(params, 'similarartists', cb)\n  }\n\n  artistTopAlbums (opts, cb) {\n    if (!opts.name) {\n      return cb(new Error('Missing required param: name'))\n    }\n    const params = {\n      method: 'artist.getTopAlbums',\n      artist: opts.name,\n      limit: opts.limit,\n      autocorrect: 1\n    }\n    this._sendRequest(params, 'topalbums', (err, data) => {\n      if (err) return cb(err)\n      cb(null, {\n        meta: this._parseMeta(data, opts),\n        result: this._parseAlbums(data.album)\n      })\n    })\n  }\n\n  artistTopTags (opts, cb) {\n    if (!opts.name) {\n      return cb(new Error('Missing required param: name'))\n    }\n    const params = {\n      method: 'artist.getTopTags',\n      artist: opts.name,\n      autocorrect: 1\n    }\n    this._sendRequest(params, 'toptags', cb)\n  }\n\n  artistTopTracks (opts, cb) {\n    if (!opts.name) {\n      return cb(new Error('Missing required param: name'))\n    }\n    const params = {\n      method: 'artist.getTopTracks',\n      artist: opts.name,\n      limit: opts.limit,\n      autocorrect: 1\n    }\n    this._sendRequest(params, 'toptracks', (err, data) => {\n      if (err) return cb(err)\n      cb(null, {\n        meta: this._parseMeta(data, opts),\n        result: this._parseTracks(data.track)\n      })\n    })\n  }\n\n  artistSearch (opts, cb) {\n    if (!opts.q) {\n      return cb(new Error('Missing required param: q'))\n    }\n    const params = {\n      method: 'artist.search',\n      limit: opts.limit,\n      page: opts.page,\n      artist: opts.q\n    }\n    this._sendRequest(params, 'results', (err, data) => {\n      if (err) return cb(err)\n      cb(null, {\n        meta: this._parseMeta(data, opts),\n        result: this._parseArtists(data.artistmatches.artist)\n      })\n    })\n  }\n\n  /**\n   * CHART API\n   */\n\n  chartTopArtists (opts, cb) {\n    const params = {\n      method: 'chart.getTopArtists',\n      limit: opts.limit,\n      page: opts.page,\n      autocorrect: 1\n    }\n    this._sendRequest(params, 'artists', (err, data) => {\n      if (err) return cb(err)\n      cb(null, {\n        meta: this._parseMeta(data, opts),\n        result: this._parseArtists(data.artist)\n      })\n    })\n  }\n\n  chartTopTags (opts, cb) {\n    const params = {\n      method: 'chart.getTopTags',\n      limit: opts.limit,\n      page: opts.page,\n      autocorrect: 1\n    }\n    this._sendRequest(params, 'tags', cb)\n  }\n\n  chartTopTracks (opts, cb) {\n    const params = {\n      method: 'chart.getTopTracks',\n      limit: opts.limit,\n      page: opts.page,\n      autocorrect: 1\n    }\n    this._sendRequest(params, 'tracks', (err, data) => {\n      if (err) return cb(err)\n      cb(null, {\n        meta: this._parseMeta(data, opts),\n        result: this._parseTracks(data.track)\n      })\n    })\n  }\n\n  /**\n   * GEO API\n   */\n\n  geoTopArtists (opts, cb) {\n    if (!opts.country) {\n      return cb(new Error('Missing required param: country'))\n    }\n    const params = {\n      method: 'geo.getTopArtists',\n      country: opts.country,\n      limit: opts.limit,\n      page: opts.page,\n      autocorrect: 1\n    }\n    this._sendRequest(params, 'topartists', cb)\n  }\n\n  geoTopTracks (opts, cb) {\n    if (!opts.country) {\n      return cb(new Error('Missing required param: country'))\n    }\n    const params = {\n      method: 'geo.getTopTracks',\n      country: opts.country,\n      limit: opts.limit,\n      page: opts.page,\n      autocorrect: 1\n    }\n    this._sendRequest(params, 'tracks', cb)\n  }\n\n  /**\n   * TAG API\n   */\n\n  tagInfo (opts, cb) {\n    if (!opts.tag) {\n      return cb(new Error('Missing required param: tag'))\n    }\n    const params = {\n      method: 'tag.getInfo',\n      tag: opts.tag\n    }\n    this._sendRequest(params, 'tag', cb)\n  }\n\n  tagSimilar (opts, cb) {\n    if (!opts.tag) {\n      return cb(new Error('Missing required param: tag'))\n    }\n    const params = {\n      method: 'tag.getSimilar',\n      tag: opts.tag\n    }\n    this._sendRequest(params, 'similartags', cb)\n  }\n\n  tagTopAlbums (opts, cb) {\n    if (!opts.tag) {\n      return cb(new Error('Missing required param: tag'))\n    }\n    const params = {\n      method: 'tag.getTopAlbums',\n      limit: opts.limit,\n      page: opts.page,\n      tag: opts.tag\n    }\n    this._sendRequest(params, 'albums', cb)\n  }\n\n  tagTopArtists (opts, cb) {\n    if (!opts.tag) {\n      return cb(new Error('Missing required param: tag'))\n    }\n    const params = {\n      method: 'tag.getTopArtists',\n      limit: opts.limit,\n      page: opts.page,\n      tag: opts.tag\n    }\n    this._sendRequest(params, 'topartists', cb)\n  }\n\n  tagTopTags (opts, cb) {\n    const params = {\n      method: 'tag.getTopTags'\n    }\n    this._sendRequest(params, 'toptags', cb)\n  }\n\n  tagTopTracks (opts, cb) {\n    if (!opts.tag) {\n      return cb(new Error('Missing required param: tag'))\n    }\n    const params = {\n      method: 'tag.getTopTracks',\n      limit: opts.limit,\n      page: opts.page,\n      tag: opts.tag\n    }\n    this._sendRequest(params, 'tracks', cb)\n  }\n\n  /**\n   * TRACK API\n   */\n\n  trackCorrection (opts, cb) {\n    if (!opts.name || !opts.artistName) {\n      return cb(new Error('Missing required params: name, artistName'))\n    }\n    const params = {\n      method: 'track.getCorrection',\n      track: opts.name,\n      artist: opts.artistName\n    }\n    this._sendRequest(params, 'corrections', (err, data) => {\n      if (err) return cb(err)\n      cb(null, {\n        name: data.correction.track.name,\n        artistName: data.correction.track.artist.name\n      })\n    })\n  }\n\n  trackInfo (opts, cb) {\n    if (!opts.name || !opts.artistName) {\n      return cb(new Error('Missing required params: name, artistName'))\n    }\n    const params = {\n      method: 'track.getInfo',\n      track: opts.name,\n      artist: opts.artistName,\n      autocorrect: 1\n    }\n    this._sendRequest(params, 'track', (err, track) => {\n      if (err) return cb(err)\n      cb(null, {\n        type: 'track',\n        name: track.name,\n        artistName: track.artist.name,\n        albumName: track.album && track.album.title,\n        listeners: Number(track.listeners),\n        duration: Math.ceil(track.duration / 1000),\n        images: track.album && this._parseImages(track.album.image),\n        tags: this._parseTags(track.toptags)\n      })\n    })\n  }\n\n  trackSimilar (opts, cb) {\n    if (!opts.name || !opts.artistName) {\n      return cb(new Error('Missing required params: name, artistName'))\n    }\n    const params = {\n      method: 'track.getSimilar',\n      track: opts.name,\n      artist: opts.artistName,\n      limit: opts.limit,\n      autocorrect: 1\n    }\n    this._sendRequest(params, 'similartracks', cb)\n  }\n\n  trackTopTags (opts, cb) {\n    if (!opts.name || !opts.artistName) {\n      return cb(new Error('Missing required params: name, artistName'))\n    }\n    const params = {\n      method: 'track.getTopTags',\n      track: opts.name,\n      artist: opts.artistName,\n      autocorrect: 1\n    }\n    this._sendRequest(params, 'toptags', cb)\n  }\n\n  trackSearch (opts, cb) {\n    if (!opts.q) {\n      return cb(new Error('Missing required param: q'))\n    }\n    const params = {\n      method: 'track.search',\n      limit: opts.limit,\n      page: opts.page,\n      track: opts.q,\n      artist: opts.artist // narrow search by artist (optional)\n    }\n    this._sendRequest(params, 'results', (err, data) => {\n      if (err) return cb(err)\n      cb(null, {\n        meta: this._parseMeta(data, opts),\n        result: this._parseTracks(data.trackmatches.track)\n      })\n    })\n  }\n}\n\nmodule.exports = LastFM\n"]},"metadata":{},"sourceType":"script"}